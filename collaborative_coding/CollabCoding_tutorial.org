#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [10pt, t]
#+BEAMER_FRAME_LEVEL: 1
#+TITLE: Collaborative Coding: Developing DESC Software
#+AUTHOR: Jim Chiang
#+DATE: 2016-03-08
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %8BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 :ETC
#+OPTIONS: toc:nil
#+LaTeX_HEADER: \newcommand{\code}[1]{{\tt{#1}}}
#+LaTeX_HEADER: \newcommand{\mybold}[1]{{\textbf{#1}}}
#+LaTeX_HEADER: \hypersetup{colorlinks=true, urlcolor=blue}

* Outline
- Key Messages:
  - Automate your tests.
  - Read other people's code, have others look at yours.
  - Have a set of coding conventions for your group.
- Demos:
  - GitHub flow for managing development in group projects.
  - Using a testing framework and other development tools.
  - Travis CI: A continuous integration service.

Reference material:
\tt
https://confluence.slac.stanford.edu/x/RA1lD

* Automate Your Tests
  "Automated" means that the tests self-verifying and can be run
  without any special set up (such as files or other inputs) that
  needs to be prepared.
#+LATEX:\vspace{0.1in}

  \mybold{Why:}
  - Everyone who runs their code and looks at the output is testing
    their code. However, if you want others to use your code or rely
    on the results from your code, it needs to be tested thoroughly
    and systematically.
  - Even for well-designed, loosely coupled code, new development can
    introduce bugs that break existing functionality.  A good set of
    automated tests can guard against that.
  - A comprehensive set of unit tests allows you to \emph{refactor}
    (i.e., improve working code while not changing functionality)
    aggressively.

* Automate Your Tests
  \mybold{How:} There are many types of software testing: system,
  integration, regression, etc..  \emph{Unit tests} bear most directly
  on day-to-day (or even minute-to-minute) development.
  - Unit tests consider the functionality of the smallest units of
    code:  functions and class methods.
  - It is natural to test for success, i.e., compare results to
    expectations, but one should also check for failure, consistency,
    etc.
  - Unit tests should be quick and easy to execute, and they should be
    run often throughout the development cycle.
  - The output of successful tests should be minimal.  If you have to
    examine the output to verify success, you will run the tests less
    often.
  - Consider using "test first development" methods, especially for
    fixing bugs: write a test that reveals the bug, fix the code to
    make it pass, and keep that test as part of the test suite.
  - 100% "coverage" is the ideal, but if you have to prioritize
    testing, \emph{write tests for the functions that have the
    greatest cost of failure.}
  - Use a testing framework, e.g., \code{unittest} for Python, and
    hook it up to a continuous integration system like Travis CI or
    Jenkins.

* Example Unit Tests
  From https://github.com/jchiang87/Primes/blob/master/tests/test_Primes.py
\small
#+BEGIN_SRC python
import unittest
from desc.primes import is_prime

class PrimesTestCase(unittest.TestCase):
    """
    TestCase class for is_prime function.
    """
    def test_one_is_not_prime(self):
        self.assertFalse(is_prime(1))

    def test_two_is_prime(self):
        self.assertTrue(is_prime(2))

    def test_float_raises_type_error(self):
        self.assertRaises(TypeError, is_prime, 3.14159)
#+END_SRC python
A more interesting example can be seen at
https://github.com/DarkEnergyScienceCollaboration/Twinkles/tree/master/tests

* Read other people's code, have others read yours (share your code)
  \mybold{Why:}
  - Software development has standard practices that have evolved that
    help make code more reliable.  Those practices can be taught, but
    most scientists pick up coding on their own and not necessarily
    with the best examples at hand.  However, many do take the craft
    of coding seriously, so look for examples of good code in your
    colleagues' work.
  - Not everyone approaches a coding task the same way.  Multiple eyes
    on a problem or design issue can lead to better implementation.
  - For a group software project, there is a lot of risk in having
    only one person who understands or can maintain an important part
    of the code base.  The more widely understood an important code
    is, the better.

* Read other people's code, have others read yours (share your code)
  \mybold{How} -- some suggestions:
  - Put your code on GitHub.  This is the easiest way to make your code
    available for others to read and try out.
  - Do code reviews.  If done incrementally, reviews can be relatively
    painless.  The DM team has a description of [[http://developer.lsst.io/en/latest/processes/workflow.html#the-scope-and-purpose-of-code-review][the purpose and scope
    of code review]].
  - Pair program.  Have people with different programming backgrounds and
    different levels of experience work together.
  - Have different people cycle through working on any given part of
    the code.  This will help ensure that the expertise to work
    effectively on any part of the code base does not reside in just
    one person.

* Have a set of coding conventions for your group
  \mybold{Why:} Coding style is like a dialect: two developers may be
  using the same language (Python, C++), but if their respective
  coding styles differ substantially, they'll have trouble
  understanding each other's code.

#+LATEX: \vfill
#+LATEX: \centering
#+ATTR_LATEX: height=2in
[[./tumblr_mnmlnrzv1c1sswsljo1_400.jpg]]
#+LATEX: \vfil


* Have a set of coding conventions for your group
  \mybold{How} -- suggestions:
  - Look at standard conventions, such as [[https://www.python.org/dev/peps/pep-0008/][PEP8]], which are standards
    for a reason.  Reach consensus on the standards that you do adopt.
  - Use code checking tools, such as \emph{linters} like [[https://www.pylint.org/][PyLint]].
    These are configurable and can also perform static code analysis
    to uncover real or potential bugs.
  - Use editor plugins for the code checking tools so that the friction
    to using them is minimal.
  Another benefit of having code pass linter-type tests is that a person
  reviewing the code can concentrate on the substantive aspects of the
  implementation, thereby making the feedback from the review more
  valuable.

* GitHub Flow
  For a project with several developers, it is helpful to have a
  common \emph{development workflow} to avoid conflicts.  Git's
  branching facility is a powerful feature that enables this.  There
  are a number of different workflows that are widely used.  The DM
  team's workflow is based on GitHub Flow.

#+LATEX:\vspace{0.1in}
  As an example, we'll fix a bug in https://github.com/jchiang87/Primes

* GitHub Flow (2)
  Here are the steps for [[https://guides.github.com/introduction/flow/][GitHub Flow]]:
  - Create a branch off master.  Developing on a branch helps ensure
    that master remains deployable, i.e., not broken.
\small
#+BEGIN_SRC sh
   $ git branch
   * master
   $ git pull
   Already up-to-date.
   $ git checkout -b issue/1/non_positive_args_cause_TypeError
   Switched to a new branch 'issue/1/non_positive_args_cause_TypeError'
   $
#+END_SRC sh

* GitHub Flow (3)
  - Add commits to keep track of the work done on the branch.
\small
#+BEGIN_SRC sh
   $ emacs tests/test_Primes.py

   <...edit the test code, and verify the new test fails...>

   $ git add tests/test_Primes.py
   $ git commit -m "add test for numbers <= 0"
   [issue/1/non_positive_args_cause_TypeError a5d3db2] add test for numbers <= 0
    1 file changed, 5 insertions(+)

   <...edit the production code, and verify *all* of the tests pass...>

   $ git add python/desc/primes/Primes.py
   $ git commit -m "fix Primes.is_prime to raise TypeError for numbers <= 0"
   [issue/1/non_positive_args_cause_TypeError 552d458] fix Primes.is_prime to raise TypeError for numbers <= 0
    1 file changed, 3 insertions(+)
   $
#+END_SRC sh

* GitHub Flow (4)
  - Push the changes to GitHub.
\small
#+BEGIN_SRC sh
   $ git push -u origin issue/1/non_positive_args_cause_TypeError 
   Counting objects: 17, done.
   Delta compression using up to 4 threads.
   Compressing objects: 100% (8/8), done.
   Writing objects: 100% (10/10), 996 bytes | 0 bytes/s, done.
   Total 10 (delta 4), reused 0 (delta 0)
   To git@github.com:jchiang87/Primes.git
    * [new branch]      issue/1/non_positive_args_cause_TypeError -> issue/1/non_positive_args_cause_TypeError
   Branch issue/1/non_positive_args_cause_TypeError set up to track remote branch issue/1/non_positive_args_cause_TypeError from origin.
   $
#+END_SRC sh

* GitHub Flow (5)
  - Open a Pull Request.  This can happen at any time and provides a
    forum for the discussion about the development, including code review.
    Continuous integration tools like Travis CI can be configured to
    trigger builds on pushes or PRs.
[[./Create_Pull_Request.png]]

* GitHub Flow (6)
  - Discuss and review the code using the PR thread.  Make any changes
    in response to the review, and commit and push to the branch as
    before.
[[./Create_Pull_Request_3.png]]

* GitHub Flow (7)
  - Once all the tests pass and the reviewer is satisfied, merge into
    master.  There may be a step to run and pass \emph{integration
    tests} before merging into master; these could also be triggerable
    as part of the CI service.

* Demo using development tools with \code{emacs}
  Some relevant links:
  - [[https://docs.python.org/2/library/unittest.html][unittest]]: The standard unit testing framework for Python.
  - [[https://www.pylint.org/][PyLint]]: A Python code checking tool.
  - [[https://nose.readthedocs.org/en/latest/][nose]]: For running unit tests.
  - [[http://jedi.jedidjah.ch/en/latest/][Jedi]]: An autocompletion and static analysis library for Python.
  - DM team configurations for [[http://developer.lsst.io/en/latest/tools/emacs.html][emacs]] and [[http://developer.lsst.io/en/latest/tools/vim.html][vim]].

* Demo using Travis CI
  Be sure to use the \code{.org} address for \emph{public} GitHub 
  repositories:
  https://travis-ci.org/

* Summary
- Take-aways:
  - Automate your tests.
  - Read other people's code, have others look at yours.
  - Have a set of coding conventions for your group.
- Demos:
  - GitHub flow
  - Using a testing framework and other development tools
  - Travis CI

Reference material:
\tt
https://confluence.slac.stanford.edu/x/RA1lD

